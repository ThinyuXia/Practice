<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">

    <!-- 开启二级缓存
            eviction是缓存的清除策略，当缓存对象数量达到上限时，自动触发相应算法清除缓存对象
            LRU - 最近最久未使用：移除最长时间未使用的对象
            FIFO - 先进先出：按对象进入缓存的顺序移除
            SOFT - 软引用：移除基于垃圾收集器状态和软引用规则的对象
            WEAK - 弱引用：更积极的移除基于垃圾收集器对象和软引用规则的对象
       flushInterval：间隔多长时间自动清除缓存，单位毫秒
       size：缓存存储上限，用于保存对象或集合(一个集合算一个对象)的数量上限
       readOnly 设置为true，代表返回只读缓存，每次从缓存中取出的是缓存对象本身，这种执行效率较高
                设置为false，代表每次取出的是缓存对象的副本，这样每次取出的缓存对象是不同的，这种安全性较高
    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>

    <select id="selectAll" resultType="com.xiaxinyu.mybatis.entity.Goods" useCache="false">
        SELECT * FROM t_goods ORDER BY goods_id DESC LIMIT 10
    </select>

    <!--单参数传递时，使用parameterType接收指定类型的参数即可，sql中使用#{value}提取参数-->
    <select id="selectById" parameterType="Integer" resultType="com.xiaxinyu.mybatis.entity.Goods">
        SELECT * FROM t_goods WHERE goods_id = #{value}
    </select>


    <!--多参数传递时，使用parameterType接收指定Map接口，sql中使用#{key}提取参数-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.xiaxinyu.mybatis.entity.Goods">
        SELECT * FROM t_goods WHERE current_price BETWEEN #{min} AND #{max} LIMIT 0,#{limit}
    </select>

    <!-- 利用LinkedList保存多表关联的查询结果
         Mabatis将每条记录包装为LinkedHashMap对象
         key，value分别是字段名和对应的值
         优点：易于扩展和使用
         缺点：太过灵活，无法进行编译时检查
    -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        SELECT g.*,c.category_name FROM t_goods g,t_category c WHERE g.category_id = c.category_id
    </select>

    <resultMap id="rmGoods" type="com.xiaxinyu.mybatis.dto.GoodsDTO">
        <!--设置主键字段与属性映射-->
        <id column="goods_id" property="goods.goodsId"></id>
        <!--设置非主键字段与属性映射-->
        <result column="title" property="goods.title"></result>
        <result column="original_cost" property="goods.originalCost"></result>
        <result column="current_price" property="goods.currentPrice"></result>
        <result column="discount" property="goods.discount"></result>
        <result column="is_free_delivery" property="goods.isFreeDelivery"></result>
        <result column="category_id" property="goods.categoryId"></result>
        <result column="category_id" property="category.categoryId"></result>
        <result column="category_name" property="category.categoryName"></result>
        <result column="parent_id" property="category.parentId"></result>
        <result column="category_level" property="category.categoryLevel"></result>
        <result column="category_order" property="category.categoryOrder"></result>

        <result column="test" property="test"></result>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        SELECT g.*,c.* FROM t_goods g,t_category c WHERE g.category_id = c.category_id
    </select>

    <insert id="insert" parameterType="com.xiaxinyu.mybatis.entity.Goods" flushCache="true">
        INSERT INTO t_goods (title,sub_title,original_cost,current_price,discount,is_free_delivery,category_id)
            VALUES(#{title},#{subTitle},#{originalCost},#{currentPrice},#{discount},#{isFreeDelivery},#{categoryId})

        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            <!--获取当前连接最后产生的id号-->
            SELECT last_insert_id()
        </selectKey>
    </insert>

    <update id="update" parameterType="com.xiaxinyu.mybatis.entity.Goods">
        UPDATE t_goods SET title = #{title}, sub_title = #{subTitle},original_cost = #{currentPrice},is_free_delivery = #{isFreeDelivery},category_id = #{categoryId}
        WHERE goods_id =#{goodsId}
    </update>

    <delete id="delete" parameterType="Integer">
        DELETE FROM t_goods WHERE goods_id = #{value}
    </delete>
    
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.xiaxinyu.mybatis.entity.Goods">
        SELECT * FROM t_goods
        <where>
            <if test="categoryId != null">
                AND category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                AND current_price &lt; #{currentPrice}
            </if>
        </where>

    </select>

    <!-- resultMap用于说明一对多或多对一的映射逻辑
         id 是resultMap属性引用的标志
         type指向One的实体(Goods)
         -->

    <resultMap id="rmGoods1" type="com.xiaxinyu.mybatis.entity.Goods">
        <!-- 映射Goods对象的主键到goods_id字段 -->
        <id column="goods_id" property="goodsId"/>
        <!-- 在SELECT 得到结果后，对所有Goods对象遍历得到goods_id字段值
             并带入到goodsDetail.selectByGoodsId中进行查询，将
             得到的商品详情集合赋值给goods对象中的goodsDetails对象
         -->
        <collection column="goods_id" property="goodsDetails" select="goodsDetail.selectByGoodsId"/>
    </resultMap>
    <!-- 根据一查询多
         此时Goods是一，在OneToMany的前面
         所以在goods.xml写select标签和resultMap
     -->
    <select id="selectOneToMany" resultMap="rmGoods1">
        SELECT * FROM t_goods limit 0,2
    </select>



</mapper>